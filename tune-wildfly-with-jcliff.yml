---
- name: "A Wildfly Playbook"
  hosts: "{{ wildfly_ansible_hosts | default('localhost') }}"
  gather_facts: "{{ gather_facts_enable | default('false') }}"
  vars:
    wfly_home: "/opt/wildfly/wildfly-16.0.0.Final/"
    pgsql_module_dir: "{{ wfly_home }}//modules/org/postgresql/main"
    jdbc_drive_url: https://repo.maven.apache.org/maven2/org/postgresql/postgresql/9.2-1002-jdbc4/postgresql-9.2-1002-jdbc4.jar
    app_url: http://people.redhat.com/~rpelisse/simple-webapp.war
    app: /tmp/simple-webapp.war
    path_to_custom_rules: "{{ custom_rules_folder | default('../../files/custom_rules') }}"
    wfly_time_to_boot: "{{ custom_wfly_time_to_boot | default('60') }}"
  roles:
    - redhat-cop.jcliff
  tasks:
    - name: "Download a demo app to deploy"
      get_url:
        url: "{{ app_url }}"
        dest: "{{ app }}"

    - name: "Tuning Wildfly using JCliff"
      jcliff:
        wfly_home: "{{ wfly_home }}"
        rule_file: "{{ path_to_custom_rules }}"
        subsystems:
          - drivers:
              - driver_name: h2
                driver_class_name: org.h2.driver.classname
                driver_xa_datasource_class_name: org.h2.jdbcx.JdbcDataSource
                driver_datasource_class_name: org.h2.jdbcx.JdbcDataSource
                driver_module_name: com.h2database.h2
              - driver_name: postgresql
                driver_module_name: org.postgresql
                driver_class_name: org.postgresql.Driver
          - datasources:
              - name: ExampleDS
                use_java_context: true
                jndi_name: java:jboss/datasources/ExampleDS
                connection_url: "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE"
                driver_name: h2
                user_name: sa
                password: sa
              - name: MyPostgresDS
                jndi_name: 'java:jboss/datasources/MyPostgresDS'
                connection_url: 'jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE'
                driver_name: postgresql
          - system_props:
              - name: aMeaningfulProperty
                value: withAProperValue
              - name: anotherUsefulProperty
                value: AgainAProperValue
          - deployments:
              - artifact_id: simple-webapp-v1.war
                name: simple-webapp
                path: "{{ app }}"
      notify: "Restart Wildfly Server"

    - name: "Restarting Wfly (can't wait for handler to happen, as we want to check now if the JCliff changes have been applied)"
      service:
        name: wfly
        state: restarted

    - name: "sleep for {{ wfly_time_to_boot }}s to let a chance for Wfly to be fully up"
      wait_for:
        timeout: "{{ wfly_time_to_boot }}"

    - name: "Check if Drivers have been deployed"
      command: "{{ wfly_home }}/bin/jboss-cli.sh --connect --command='/subsystem=datasources/jdbc-driver={{ driver_name }}:read-resource'"
      register: cli_result
      changed_when: cli_result.rc != 0
      loop:
        - h2
        - postgresql
      loop_control:
        loop_var: driver_name

    - name: "Check if DS have been deployed"
      command: "{{ wfly_home }}/bin/jboss-cli.sh --connect --command='/subsystem=datasources/data-source={{ ds_name }}:read-resource'"
      register: cli_result
      changed_when: cli_result.rc != 0
      loop:
        - ExampleDS
        - MyPostgresDS
      loop_control:
        loop_var: ds_name

    - name: "Check if properties have been deployed"
      command: "{{ wfly_home }}/bin/jboss-cli.sh --connect --command='/system-property={{ prop_name }}:read-resource'"
      register: cli_result
      changed_when: cli_result.rc != 0
      loop:
        - aMeaningfulProperty
        - anotherUsefulProperty
      loop_control:
        loop_var: prop_name

    - name: "Check if webapp is accessible"
      uri:
        url: http://localhost:8080/info
        return_content: yes

  handlers:
    - name: "Restart Wildfly Server"
      service:
        name: wfly
        state: restarted
